C51 COMPILER V9.53.0.0   EFM8BB3_ADC_EXTERNALINPUT                                         07/17/2019 16:25:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB3_ADC_EXTERNALINPUT
OBJECT MODULE PLACED IN .\src\EFM8BB3_ADC_ExternalInput.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\uxdai\S
                    -implicityStudio\v4_workspace\EFM8BB3_ADC_ExternalInput\src\EFM8BB3_ADC_ExternalInput.c OMF2 SMALL DEBUG OBJECTEXTEND ROM
                    -(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\uxdai\SimplicityStu
                    -dio\v4_workspace\EFM8BB3_ADC_ExternalInput\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.6//kits/commo
                    -n/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.6//Device/shared/si8051Base;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.6//Device/EFM8BB3/inc) PRINT(.\src\EFM8BB3_ADC_ExternalInput.l
                    -st) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8BB3_ADC_ExternalInput.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB3_ADC_ExternalInput.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This example code takes and averages 2048 analog measurements from input
  10          // P1.7 using ADC0, then prints the results to a terminal window via the UART.
  11          //
  12          // The system is clocked by the internal 24.5 MHz oscillator divided by 1.
  13          // Timer 2 triggers a conversion on ADC0 on each overflow.  The completion of
  14          // this conversion in turn triggers an interrupt service routine (ISR).  The ISR
  15          // averages 2048 measurements, then prints the value to the terminal via printf
  16          // before starting another average cycle.
  17          //
  18          // The analog multiplexer selects P1.7 as the positive ADC0 input. This pin is
  19          // configured as an analog input in the port initialization routine. The
  20          // negative ADC0 input is connected via mux to ground, which provides for a
  21          // single-ended ADC input.
  22          //
  23          // An analog joystick is connected to P1.7. Each joystick position corresponds
  24          // to a unique voltage.
  25          //
  26          // Terminal output is done via printf, which directs the characters to
  27          // UART0.  A UART initialization routine is therefore necessary.
  28          //
  29          // ADC Settling Time Requirements, Sampling Rate:
  30          // ----------------------------------------------
  31          //
  32          // The total sample time per input is comprised of an input setting time
  33          // (Tsettle), followed by a conversion time (Tconvert):
  34          //
  35          // Tsample  = Tsettle + Tconvert
  36          //
  37          // |--------Settling-------|==Conversion==|----Settling--- . . .
  38          // Timer 2 overflow        ^
  39          // ADC0 ISR                               ^
  40          //
  41          // The ADC input voltage must be allowed adequate time to settle before the
  42          // conversion is made.  This settling depends on the external source
  43          // impedance, internal mux impedance, and internal capacitance.
  44          // Settling time is given by:
  45          //
  46          //                   | 2^n |
  47          //    Tsettle =   ln | --- | * Rtotal * Csample
  48          //                   | SA  |
  49          //
  50          // For example, assume Rtotal = 100 kohm. The expression evaluates to:
C51 COMPILER V9.53.0.0   EFM8BB3_ADC_EXTERNALINPUT                                         07/17/2019 16:25:41 PAGE 2   

  51          //
  52          //                   | 2^12 |
  53          //    Tsettle =   ln | ---- | * 100e3 * 5e-12 = 4.85 us
  54          //                   | 0.25 |
  55          //
  56          // In addition, one must allow at least 1.5uS after changing analog mux
  57          // inputs or PGA settings.  The settling time in this example, then, is
  58          // dictated by the large external source resistance.
  59          //
  60          // The conversion time is given in the datasheet (12-bit mode, SAR clock 18 MHz)
  61          // as 0.7 us.
  62          //
  63          // Tsample, minimum  = Tsettle + Tconvert
  64          //                   = 4.85 us + 0.7 us
  65          //                   = 5.52 us
  66          //
  67          // Timer2 is set to start a conversion every 100 us, which is far longer
  68          // than the minimum required.
  69          //
  70          // Resources:
  71          //   SYSCLK - 24.5 MHz HFOSC0 / 1
  72          //   ADC    - 12-bit, VREF = VDD (3.3V)
  73          //   UART0  - 115200 baud, 8-N-1
  74          //   Timer1 - UART0 clock source
  75          //   Timer2 - ADC start of conversion source
  76          //   P0.4   - UART0 TX
  77          //   P0.5   - UART0 RX
  78          //   P2.2   - Board Controller enable
  79          //   P3.4   - Display enable
  80          //
  81          //-----------------------------------------------------------------------------
  82          // How To Test: EFM8BB3 STK
  83          //-----------------------------------------------------------------------------
  84          // 1) Place the switch in "AEM" mode.
  85          // 2) Connect the EFM8BB3 STK board to a PC using a mini USB cable.
  86          // 3) Compile and download code to the EFM8BB3 STK board.
  87          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  88          //    click the Debug button in the quick menu, or press F11.
  89          // 4) On the PC, open HyperTerminal (or any other terminal program) and connect
  90          //    to the JLink CDC UART Port at 115200 baud rate and 8-N-1.
  91          // 5) Run the code.
  92          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  93          //    click the Resume button in the quick menu, or press F8.
  94          // 6) Move the joystick. The terminal program will print the voltage for
  95          //    each joystick position.
  96          //
  97          // Target:         EFM8BB3
  98          // Tool chain:     Generic
  99          //
 100          // Release 0.1 (ST)
 101          //    - Initial Revision
 102          //    - 20 MAY 2015
 103          //
 104          
 105          //-----------------------------------------------------------------------------
 106          // Includes
 107          //-----------------------------------------------------------------------------
 108          #include <SI_EFM8BB3_Register_Enums.h>
 109          #include "InitDevice.h"
 110          
 111          //-----------------------------------------------------------------------------
 112          // Pin Definitions
 113          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   EFM8BB3_ADC_EXTERNALINPUT                                         07/17/2019 16:25:41 PAGE 3   

 114          SI_SBIT (DISP_EN, SFR_P3, 4);          // Display Enable
 115          #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
 116          #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
 117          
 118          SI_SBIT (BC_EN, SFR_P2, 2);            // Board Controller Enable
 119          #define BC_DISCONNECTED 0              // 0 = Board Controller disconnected
 120                                                 //     to EFM8 UART pins
 121          #define BC_CONNECTED    1              // 1 = Board Controller connected
 122                                                 //     to EFM8 UART pins
 123          
 124          //-----------------------------------------------------------------------------
 125          // SiLabs_Startup() Routine
 126          // ----------------------------------------------------------------------------
 127          // This function is called immediately after reset, before the initialization
 128          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
 129          // useful place to disable the watchdog timer, which is enable by default
 130          // and may trigger before main() in some instances.
 131          //-----------------------------------------------------------------------------
 132          void SiLabs_Startup (void)
 133          {
 134   1        // Disable the watchdog here
 135   1      }
 136           
 137          //-----------------------------------------------------------------------------
 138          // Main Routine
 139          //-----------------------------------------------------------------------------
 140          void main (void)
 141          {
 142   1         enter_DefaultMode_from_RESET();
 143   1      
 144   1         DISP_EN = DISP_BC_DRIVEN;           // Display not driven by EFM8
 145   1      
 146   1         BC_EN = BC_CONNECTED;               // Board controller connected to EFM8
 147   1                                             // UART pins
 148   1      
 149   1         SCON0_TI = 1;                       // This STDIO library requires TI to
 150   1                                             // be set for prints to occur
 151   1      
 152   1         IE_EA = 1;                          // Enable global interrupts
 153   1      
 154   1         while (1) {}
 155   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     14    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
