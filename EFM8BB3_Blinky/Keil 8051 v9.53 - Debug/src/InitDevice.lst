C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\uxdai\S
                    -implicityStudio\v4_workspace\EFM8BB3_Blinky\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FL
                    -OATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\uxdai\SimplicityStudio\v4_workspace\EFM8BB3_B
                    -linky\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.6//Device/shared/si8051Base;C:/SiliconLabs/Simplic
                    -ityStudio/v4/developer/sdks/8051/v4.1.6//Device/EFM8BB3/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(
                    -65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_1_enter_DefaultMode_from_RESET();
  28   1              PBCFG_0_enter_DefaultMode_from_RESET();
  29   1              TIMER16_2_enter_DefaultMode_from_RESET();
  30   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  31   1              // Restore the SFRPAGE
  32   1              SFRPAGE = SFRPAGE_save;
  33   1              // [Config Calls]$
  34   1      
  35   1      }
  36          
  37          //================================================================================
  38          // WDT_0_enter_DefaultMode_from_RESET
  39          //================================================================================
  40          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  41   1              // $[WDTCN - Watchdog Timer Control]
  42   1              SFRPAGE = 0x00;
  43   1              //Disable Watchdog with key sequence
  44   1              WDTCN = 0xDE; //First key
  45   1              WDTCN = 0xAD; //Second key
  46   1              // [WDTCN - Watchdog Timer Control]$
  47   1      
  48   1      }
  49          
  50          //================================================================================
  51          // PORTS_1_enter_DefaultMode_from_RESET
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 2   

  52          //================================================================================
  53          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  54   1              // $[P1 - Port 1 Pin Latch]
  55   1              /*
  56   1               // B0 (Port 1 Bit 0 Latch) = HIGH (P1.0 is high. Set P1.0 to drive or
  57   1               //     float high.)
  58   1               // B1 (Port 1 Bit 1 Latch) = HIGH (P1.1 is high. Set P1.1 to drive or
  59   1               //     float high.)
  60   1               // B2 (Port 1 Bit 2 Latch) = HIGH (P1.2 is high. Set P1.2 to drive or
  61   1               //     float high.)
  62   1               // B3 (Port 1 Bit 3 Latch) = HIGH (P1.3 is high. Set P1.3 to drive or
  63   1               //     float high.)
  64   1               // B4 (Port 1 Bit 4 Latch) = HIGH (P1.4 is high. Set P1.4 to drive or
  65   1               //     float high.)
  66   1               // B5 (Port 1 Bit 5 Latch) = HIGH (P1.5 is high. Set P1.5 to drive or
  67   1               //     float high.)
  68   1               // B6 (Port 1 Bit 6 Latch) = HIGH (P1.6 is high. Set P1.6 to drive or
  69   1               //     float high.)
  70   1               // B7 (Port 1 Bit 7 Latch) = HIGH (P1.7 is high. Set P1.7 to drive or
  71   1               //     float high.)
  72   1               */
  73   1              P1 = P1_B0__HIGH | P1_B1__HIGH | P1_B2__HIGH | P1_B3__HIGH | P1_B4__HIGH
  74   1                              | P1_B5__HIGH | P1_B6__HIGH | P1_B7__HIGH;
  75   1              // [P1 - Port 1 Pin Latch]$
  76   1      
  77   1              // $[P1MDOUT - Port 1 Output Mode]
  78   1              /*
  79   1               // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
  80   1               //     drain.)
  81   1               // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
  82   1               //     drain.)
  83   1               // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
  84   1               //     drain.)
  85   1               // B3 (Port 1 Bit 3 Output Mode) = OPEN_DRAIN (P1.3 output is open-
  86   1               //     drain.)
  87   1               // B4 (Port 1 Bit 4 Output Mode) = PUSH_PULL (P1.4 output is push-pull.)
  88   1               // B5 (Port 1 Bit 5 Output Mode) = PUSH_PULL (P1.5 output is push-pull.)
  89   1               // B6 (Port 1 Bit 6 Output Mode) = PUSH_PULL (P1.6 output is push-pull.)
  90   1               // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
  91   1               //     drain.)
  92   1               */
  93   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
  94   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
  95   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
  96   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
  97   1              // [P1MDOUT - Port 1 Output Mode]$
  98   1      
  99   1              // $[P1MDIN - Port 1 Input Mode]
 100   1              /*
 101   1               // B0 (Port 1 Bit 0 Input Mode) = DIGITAL (P1.0 pin is configured for
 102   1               //     digital mode.)
 103   1               // B1 (Port 1 Bit 1 Input Mode) = DIGITAL (P1.1 pin is configured for
 104   1               //     digital mode.)
 105   1               // B2 (Port 1 Bit 2 Input Mode) = DIGITAL (P1.2 pin is configured for
 106   1               //     digital mode.)
 107   1               // B3 (Port 1 Bit 3 Input Mode) = DIGITAL (P1.3 pin is configured for
 108   1               //     digital mode.)
 109   1               // B4 (Port 1 Bit 4 Input Mode) = DIGITAL (P1.4 pin is configured for
 110   1               //     digital mode.)
 111   1               // B5 (Port 1 Bit 5 Input Mode) = DIGITAL (P1.5 pin is configured for
 112   1               //     digital mode.)
 113   1               // B6 (Port 1 Bit 6 Input Mode) = DIGITAL (P1.6 pin is configured for
 114   1               //     digital mode.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 3   

 115   1               // B7 (Port 1 Bit 7 Input Mode) = DIGITAL (P1.7 pin is configured for
 116   1               //     digital mode.)
 117   1               */
 118   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 119   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 120   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__DIGITAL;
 121   1              // [P1MDIN - Port 1 Input Mode]$
 122   1      
 123   1              // $[P1SKIP - Port 1 Skip]
 124   1              /*
 125   1               // B0 (Port 1 Bit 0 Skip) = NOT_SKIPPED (P1.0 pin is not skipped by the
 126   1               //     crossbar.)
 127   1               // B1 (Port 1 Bit 1 Skip) = NOT_SKIPPED (P1.1 pin is not skipped by the
 128   1               //     crossbar.)
 129   1               // B2 (Port 1 Bit 2 Skip) = NOT_SKIPPED (P1.2 pin is not skipped by the
 130   1               //     crossbar.)
 131   1               // B3 (Port 1 Bit 3 Skip) = NOT_SKIPPED (P1.3 pin is not skipped by the
 132   1               //     crossbar.)
 133   1               // B4 (Port 1 Bit 4 Skip) = SKIPPED (P1.4 pin is skipped by the
 134   1               //     crossbar.)
 135   1               // B5 (Port 1 Bit 5 Skip) = SKIPPED (P1.5 pin is skipped by the
 136   1               //     crossbar.)
 137   1               // B6 (Port 1 Bit 6 Skip) = SKIPPED (P1.6 pin is skipped by the
 138   1               //     crossbar.)
 139   1               // B7 (Port 1 Bit 7 Skip) = NOT_SKIPPED (P1.7 pin is not skipped by the
 140   1               //     crossbar.)
 141   1               */
 142   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 143   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 144   1                              | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED | P1SKIP_B6__SKIPPED
 145   1                              | P1SKIP_B7__NOT_SKIPPED;
 146   1              // [P1SKIP - Port 1 Skip]$
 147   1      
 148   1              // $[P1MASK - Port 1 Mask]
 149   1              /*
 150   1               // B0 (Port 1 Bit 0 Mask Value) = IGNORED (P1.0 pin logic value is
 151   1               //     ignored and will not cause a port mismatch event.)
 152   1               // B1 (Port 1 Bit 1 Mask Value) = IGNORED (P1.1 pin logic value is
 153   1               //     ignored and will not cause a port mismatch event.)
 154   1               // B2 (Port 1 Bit 2 Mask Value) = IGNORED (P1.2 pin logic value is
 155   1               //     ignored and will not cause a port mismatch event.)
 156   1               // B3 (Port 1 Bit 3 Mask Value) = IGNORED (P1.3 pin logic value is
 157   1               //     ignored and will not cause a port mismatch event.)
 158   1               // B4 (Port 1 Bit 4 Mask Value) = IGNORED (P1.4 pin logic value is
 159   1               //     ignored and will not cause a port mismatch event.)
 160   1               // B5 (Port 1 Bit 5 Mask Value) = IGNORED (P1.5 pin logic value is
 161   1               //     ignored and will not cause a port mismatch event.)
 162   1               // B6 (Port 1 Bit 6 Mask Value) = IGNORED (P1.6 pin logic value is
 163   1               //     ignored and will not cause a port mismatch event.)
 164   1               // B7 (Port 1 Bit 7 Mask Value) = IGNORED (P1.7 pin logic value is
 165   1               //     ignored and will not cause a port mismatch event.)
 166   1               */
 167   1              P1MASK = P1MASK_B0__IGNORED | P1MASK_B1__IGNORED | P1MASK_B2__IGNORED
 168   1                              | P1MASK_B3__IGNORED | P1MASK_B4__IGNORED | P1MASK_B5__IGNORED
 169   1                              | P1MASK_B6__IGNORED | P1MASK_B7__IGNORED;
 170   1              // [P1MASK - Port 1 Mask]$
 171   1      
 172   1              // $[P1MAT - Port 1 Match]
 173   1              /*
 174   1               // B0 (Port 1 Bit 0 Match Value) = HIGH (P1.0 pin logic value is compared
 175   1               //     with logic HIGH.)
 176   1               // B1 (Port 1 Bit 1 Match Value) = HIGH (P1.1 pin logic value is compared
 177   1               //     with logic HIGH.)
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 4   

 178   1               // B2 (Port 1 Bit 2 Match Value) = HIGH (P1.2 pin logic value is compared
 179   1               //     with logic HIGH.)
 180   1               // B3 (Port 1 Bit 3 Match Value) = HIGH (P1.3 pin logic value is compared
 181   1               //     with logic HIGH.)
 182   1               // B4 (Port 1 Bit 4 Match Value) = HIGH (P1.4 pin logic value is compared
 183   1               //     with logic HIGH.)
 184   1               // B5 (Port 1 Bit 5 Match Value) = HIGH (P1.5 pin logic value is compared
 185   1               //     with logic HIGH.)
 186   1               // B6 (Port 1 Bit 6 Match Value) = HIGH (P1.6 pin logic value is compared
 187   1               //     with logic HIGH.)
 188   1               // B7 (Port 1 Bit 7 Match Value) = HIGH (P1.7 pin logic value is compared
 189   1               //     with logic HIGH.)
 190   1               */
 191   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__HIGH | P1MAT_B2__HIGH | P1MAT_B3__HIGH
 192   1                              | P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH | P1MAT_B7__HIGH;
 193   1              // [P1MAT - Port 1 Match]$
 194   1      
 195   1      }
 196          
 197          //================================================================================
 198          // PBCFG_0_enter_DefaultMode_from_RESET
 199          //================================================================================
 200          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 201   1              // $[XBR2 - Port I/O Crossbar 2]
 202   1              /*
 203   1               // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 204   1               //     Pullups enabled (except for Ports whose I/O are configured for analog
 205   1               //     mode).)
 206   1               // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 207   1               // URT1E (UART1 I/O Enable) = DISABLED (UART1 I/O unavailable at Port
 208   1               //     pin.)
 209   1               // URT1RTSE (UART1 RTS Output Enable) = DISABLED (UART1 RTS1 unavailable
 210   1               //     at Port pin.)
 211   1               // URT1CTSE (UART1 CTS Input Enable) = DISABLED (UART1 CTS1 unavailable
 212   1               //     at Port pin.)
 213   1               */
 214   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 215   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 216   1                              | XBR2_URT1CTSE__DISABLED;
 217   1              // [XBR2 - Port I/O Crossbar 2]$
 218   1      
 219   1              // $[PRTDRV - Port Drive Strength]
 220   1              // [PRTDRV - Port Drive Strength]$
 221   1      
 222   1              // $[XBR0 - Port I/O Crossbar 0]
 223   1              // [XBR0 - Port I/O Crossbar 0]$
 224   1      
 225   1              // $[XBR1 - Port I/O Crossbar 1]
 226   1              // [XBR1 - Port I/O Crossbar 1]$
 227   1      
 228   1      }
 229          
 230          //================================================================================
 231          // LFOSC_0_enter_DefaultMode_from_RESET
 232          //================================================================================
 233          extern void LFOSC_0_enter_DefaultMode_from_RESET(void) {
 234   1              // $[LFO0CN - Low Frequency Oscillator Control]
 235   1              // [LFO0CN - Low Frequency Oscillator Control]$
 236   1      
 237   1              // $[Wait for LFOSC Ready]
 238   1              // [Wait for LFOSC Ready]$
 239   1      
 240   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 5   

 241          
 242          //================================================================================
 243          // TIMER01_0_enter_DefaultMode_from_RESET
 244          //================================================================================
 245          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 246   1              // $[Timer Initialization]
 247   1              //Save Timer Configuration
 248   1              uint8_t TCON_save = TCON;
 249   1              //Stop Timers
 250   1              TCON &= TCON_TR0__BMASK & TCON_TR1__BMASK;
 251   1      
 252   1              // [Timer Initialization]$
 253   1      
 254   1              // $[TH0 - Timer 0 High Byte]
 255   1              // [TH0 - Timer 0 High Byte]$
 256   1      
 257   1              // $[TL0 - Timer 0 Low Byte]
 258   1              // [TL0 - Timer 0 Low Byte]$
 259   1      
 260   1              // $[TH1 - Timer 1 High Byte]
 261   1              /*
 262   1               // TH1 (Timer 1 High Byte) = 0xF3
 263   1               */
 264   1              TH1 = (0xF3 << TH1_TH1__SHIFT);
 265   1              // [TH1 - Timer 1 High Byte]$
 266   1      
 267   1              // $[TL1 - Timer 1 Low Byte]
 268   1              // [TL1 - Timer 1 Low Byte]$
 269   1      
 270   1              // $[Timer Restoration]
 271   1              //Restore Timer Configuration
 272   1              TCON = TCON_save;
 273   1      
 274   1              // [Timer Restoration]$
 275   1      
 276   1      }
 277          
 278          //================================================================================
 279          // TIMER16_2_enter_DefaultMode_from_RESET
 280          //================================================================================
 281          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 282   1              // $[Timer Initialization]
 283   1              // Save Timer Configuration
 284   1              uint8_t TMR2CN0_TR2_save;
 285   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 286   1              // Stop Timer
 287   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 288   1              // [Timer Initialization]$
 289   1      
 290   1              // $[TMR2CN1 - Timer 2 Control 1]
 291   1              // [TMR2CN1 - Timer 2 Control 1]$
 292   1      
 293   1              // $[TMR2CN0 - Timer 2 Control]
 294   1              // [TMR2CN0 - Timer 2 Control]$
 295   1      
 296   1              // $[TMR2H - Timer 2 High Byte]
 297   1              // [TMR2H - Timer 2 High Byte]$
 298   1      
 299   1              // $[TMR2L - Timer 2 Low Byte]
 300   1              // [TMR2L - Timer 2 Low Byte]$
 301   1      
 302   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 303   1              /*
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 6   

 304   1               // TMR2RLH (Timer 2 Reload High Byte) = 0x38
 305   1               */
 306   1              TMR2RLH = (0x38 << TMR2RLH_TMR2RLH__SHIFT);
 307   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 308   1      
 309   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 310   1              /*
 311   1               // TMR2RLL (Timer 2 Reload Low Byte) = 0x9E
 312   1               */
 313   1              TMR2RLL = (0x9E << TMR2RLL_TMR2RLL__SHIFT);
 314   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 315   1      
 316   1              // $[TMR2CN0]
 317   1              /*
 318   1               // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 319   1               */
 320   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 321   1              // [TMR2CN0]$
 322   1      
 323   1              // $[Timer Restoration]
 324   1              // Restore Timer Configuration
 325   1              TMR2CN0 |= TMR2CN0_TR2_save;
 326   1              // [Timer Restoration]$
 327   1      
 328   1      }
 329          
 330          //================================================================================
 331          // TIMER16_3_enter_DefaultMode_from_RESET
 332          //================================================================================
 333          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 334   1              // $[Timer Initialization]
 335   1              // Save Timer Configuration
 336   1              uint8_t TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 337   1              // Stop Timer
 338   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 339   1              // [Timer Initialization]$
 340   1      
 341   1              // $[TMR3CN1 - Timer 3 Control 1]
 342   1              // [TMR3CN1 - Timer 3 Control 1]$
 343   1      
 344   1              // $[TMR3CN0 - Timer 3 Control]
 345   1              // [TMR3CN0 - Timer 3 Control]$
 346   1      
 347   1              // $[TMR3H - Timer 3 High Byte]
 348   1              // [TMR3H - Timer 3 High Byte]$
 349   1      
 350   1              // $[TMR3L - Timer 3 Low Byte]
 351   1              // [TMR3L - Timer 3 Low Byte]$
 352   1      
 353   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 354   1              /*
 355   1               // TMR3RLH (Timer 3 Reload High Byte) = 0x9C
 356   1               */
 357   1              TMR3RLH = (0x9C << TMR3RLH_TMR3RLH__SHIFT);
 358   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 359   1      
 360   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 361   1              /*
 362   1               // TMR3RLL (Timer 3 Reload Low Byte) = 0x4F
 363   1               */
 364   1              TMR3RLL = (0x4F << TMR3RLL_TMR3RLL__SHIFT);
 365   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 366   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 7   

 367   1              // $[TMR3CN0]
 368   1              // [TMR3CN0]$
 369   1      
 370   1              // $[Timer Restoration]
 371   1              // Restore Timer Configuration
 372   1              TMR3CN0 |= TMR3CN0_TR3_save;
 373   1              // [Timer Restoration]$
 374   1      
 375   1      }
 376          
 377          //================================================================================
 378          // TIMER16_4_enter_DefaultMode_from_RESET
 379          //================================================================================
 380          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 381   1              // $[Timer Initialization]
 382   1              // Save Timer Configuration
 383   1              uint8_t TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 384   1              // Stop Timer
 385   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 386   1              // [Timer Initialization]$
 387   1      
 388   1              // $[TMR4CN1 - Timer 4 Control 1]
 389   1              // [TMR4CN1 - Timer 4 Control 1]$
 390   1      
 391   1              // $[TMR4CN0 - Timer 4 Control]
 392   1              // [TMR4CN0 - Timer 4 Control]$
 393   1      
 394   1              // $[TMR4H - Timer 4 High Byte]
 395   1              // [TMR4H - Timer 4 High Byte]$
 396   1      
 397   1              // $[TMR4L - Timer 4 Low Byte]
 398   1              // [TMR4L - Timer 4 Low Byte]$
 399   1      
 400   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 401   1              /*
 402   1               // TMR4RLH (Timer 4 Reload High Byte) = 0x9C
 403   1               */
 404   1              SFRPAGE = 0x10;
 405   1              TMR4RLH = (0x9C << TMR4RLH_TMR4RLH__SHIFT);
 406   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 407   1      
 408   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 409   1              /*
 410   1               // TMR4RLL (Timer 4 Reload Low Byte) = 0x4F
 411   1               */
 412   1              TMR4RLL = (0x4F << TMR4RLL_TMR4RLL__SHIFT);
 413   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 414   1      
 415   1              // $[TMR4CN0]
 416   1              // [TMR4CN0]$
 417   1      
 418   1              // $[Timer Restoration]
 419   1              // Restore Timer Configuration
 420   1              TMR4CN0 |= TMR4CN0_TR4_save;
 421   1              // [Timer Restoration]$
 422   1      
 423   1      }
 424          
 425          //================================================================================
 426          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 427          //================================================================================
 428          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 429   1              // $[CKCON0 - Clock Control 0]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 8   

 430   1              /*
 431   1               // SCA (Timer 0/1 Prescale) = SYSCLK_DIV_12 (System clock divided by 12.)
 432   1               // T0M (Timer 0 Clock Select) = PRESCALE (Counter/Timer 0 uses the clock
 433   1               //     defined by the prescale field, SCA.)
 434   1               // T2MH (Timer 2 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 high
 435   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 436   1               // T2ML (Timer 2 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 2 low
 437   1               //     byte uses the clock defined by T2XCLK in TMR2CN0.)
 438   1               // T3MH (Timer 3 High Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 high
 439   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 440   1               // T3ML (Timer 3 Low Byte Clock Select) = EXTERNAL_CLOCK (Timer 3 low
 441   1               //     byte uses the clock defined by T3XCLK in TMR3CN0.)
 442   1               // T1M (Timer 1 Clock Select) = SYSCLK (Timer 1 uses the system clock.)
 443   1               */
 444   1              SFRPAGE = 0x00;
 445   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 446   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 447   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 448   1                              | CKCON0_T1M__SYSCLK;
 449   1              // [CKCON0 - Clock Control 0]$
 450   1      
 451   1              // $[CKCON1 - Clock Control 1]
 452   1              // [CKCON1 - Clock Control 1]$
 453   1      
 454   1              // $[TMOD - Timer 0/1 Mode]
 455   1              /*
 456   1               // T0M (Timer 0 Mode Select) = MODE0 (Mode 0, 13-bit Counter/Timer)
 457   1               // T1M (Timer 1 Mode Select) = MODE2 (Mode 2, 8-bit Counter/Timer with
 458   1               //     Auto-Reload)
 459   1               // CT0 (Counter/Timer 0 Select) = TIMER (Timer Mode. Timer 0 increments
 460   1               //     on the clock defined by T0M in the CKCON0 register.)
 461   1               // GATE0 (Timer 0 Gate Control) = DISABLED (Timer 0 enabled when TR0 = 1
 462   1               //     irrespective of INT0 logic level.)
 463   1               // CT1 (Counter/Timer 1 Select) = TIMER (Timer Mode. Timer 1 increments
 464   1               //     on the clock defined by T1M in the CKCON0 register.)
 465   1               // GATE1 (Timer 1 Gate Control) = DISABLED (Timer 1 enabled when TR1 = 1
 466   1               //     irrespective of INT1 logic level.)
 467   1               */
 468   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 469   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 470   1              // [TMOD - Timer 0/1 Mode]$
 471   1      
 472   1              // $[TCON - Timer 0/1 Control]
 473   1              /*
 474   1               // TR1 (Timer 1 Run Control) = RUN (Start Timer 1 running.)
 475   1               */
 476   1              TCON |= TCON_TR1__RUN;
 477   1              // [TCON - Timer 0/1 Control]$
 478   1      
 479   1      }
 480          
 481          //================================================================================
 482          // INTERRUPT_0_enter_DefaultMode_from_RESET
 483          //================================================================================
 484          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 485   1              // $[EIE1 - Extended Interrupt Enable 1]
 486   1              // [EIE1 - Extended Interrupt Enable 1]$
 487   1      
 488   1              // $[EIE2 - Extended Interrupt Enable 2]
 489   1              // [EIE2 - Extended Interrupt Enable 2]$
 490   1      
 491   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 492   1              // [EIP1H - Extended Interrupt Priority 1 High]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        07/17/2019 15:23:14 PAGE 9   

 493   1      
 494   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 495   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 496   1      
 497   1              // $[EIP2 - Extended Interrupt Priority 2]
 498   1              // [EIP2 - Extended Interrupt Priority 2]$
 499   1      
 500   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 501   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 502   1      
 503   1              // $[IE - Interrupt Enable]
 504   1              /*
 505   1               // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 506   1               //     to its individual mask setting.)
 507   1               // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 508   1               //     interrupt 0.)
 509   1               // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 510   1               //     interrupt 1.)
 511   1               // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 512   1               //     interrupts.)
 513   1               // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 514   1               //     interrupt.)
 515   1               // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 516   1               //     interrupt.)
 517   1               // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 518   1               //     generated by the TF2L or TF2H flags.)
 519   1               // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 520   1               */
 521   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 522   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 523   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 524   1              // [IE - Interrupt Enable]$
 525   1      
 526   1              // $[IP - Interrupt Priority]
 527   1              // [IP - Interrupt Priority]$
 528   1      
 529   1              // $[IPH - Interrupt Priority High]
 530   1              // [IPH - Interrupt Priority High]$
 531   1      
 532   1      }
 533          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    138    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
